generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_PG_URL")
}

model User {
  id        Int              @id @default(autoincrement()) @map("user_id")
  username  String           @unique
  email     String           @unique
  createdAt DateTime         @default(now()) @map("created_at")
  workoutPlans  WorkoutPlan[]
}

model WorkoutPlan {
  id          Int       @id @default(autoincrement()) @map("workout_plan_id")
  name        String    @db.VarChar(255)
  description String?   @db.Text
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  workouts    Workout[]
}

model Workout {
  id          Int               @id @default(autoincrement()) @map("workout_id")
  name        String            @db.VarChar(255)
  workoutPlanId Int             @map("workout_plan_id")
  workoutPlan WorkoutPlan       @relation(fields: [workoutPlanId], references: [id])
  instances   WorkoutInstance[]
  sets        WorkoutSet[]
}

model WorkoutInstance {
  id         Int         @id @default(autoincrement()) @map("workout_instance_id")
  workoutId  Int         @map("workout_id")
  workout    Workout     @relation(fields: [workoutId], references: [id])
  date       DateTime    @default(now())
}

model WorkoutSet {
  id          Int         @id @default(autoincrement()) @map("workout_set_id")
  workoutId   Int         @map("workout_id")
  workout     Workout     @relation(fields: [workoutId], references: [id])
  movementId  Int         @map("movement_id")
  movement    Movement    @relation(fields: [movementId], references: [id])
  sets        Int
  reps        Int
  loadLbs     Int?        @map("load_lbs")
  restMinutes Int?        @map("rest_minutes")
}

model Movement {
  id       Int                @id @default(autoincrement()) @map("movement_id")
  name     String             @db.VarChar(255)
  category String?
  sets     WorkoutSet[]
  estimates EstimatedOneRm[]
  logs     ExerciseProgressLog[]
}

model EstimatedOneRm {
  id               Int         @id @default(autoincrement()) @map("estimate_id")
  movementId       Int         @unique @map("movement_id")
  movement         Movement    @relation(fields: [movementId], references: [id])
  estimateDate     DateTime    @default(now()) @map("estimate_date")
  estimatedOneRmLbs Int        @map("estimated_onerm_lbs")
  method           String?
}

model ExerciseProgressLog {
  id                Int         @id @default(autoincrement()) @map("log_id")
  movementId        Int?        @map("movement_id")
  movement          Movement?   @relation(fields: [movementId], references: [id])
  logDate           DateTime    @default(now()) @map("log_date")
  measuredOneRmLbs  Int?        @map("measured_onerm_lbs")
  userDeloadFlag    Boolean     @default(false) @map("user_deload_flag")
  periodicDeloadFlag Boolean    @default(false) @map("periodic_deload_flag")
  notes             String?
}
